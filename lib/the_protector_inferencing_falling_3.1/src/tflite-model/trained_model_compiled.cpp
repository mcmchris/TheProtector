/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 03.02.2023 15:12:54

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[3] = { -0.25999230146408081, -0.19768743216991425, 0.36237531900405884, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const ALIGN(16) float tensor_data2[10] = { -0.23063771426677704, 0.60995876789093018, 0.039548575878143311, 0.17862863838672638, 0.52771574258804321, 0.42403450608253479, -0.18899492919445038, -0.26471218466758728, 0.31962341070175171, -0.21760120987892151, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(16) float tensor_data3[20] = { 0.20569552481174469, 0.20876854658126831, -0.15964865684509277, -0.11408872902393341, 0.036880761384963989, 0.51331067085266113, 0.0994873046875, -0.041122633963823318, 0.18475541472434998, -0.098858781158924103, 0.120579794049263, 0.32009905576705933, 0.15279778838157654, 0.19481325149536133, -0.043162744492292404, 0.32263737916946411, -0.065165698528289795, 0.3030758798122406, 0.021423991769552231, -0.14038403332233429, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const ALIGN(16) float tensor_data4[20*33] = { 
  -0.19107337296009064, -0.29988965392112732, -0.21971897780895233, 0.037413954734802246, -0.092860683798789978, 0.036239229142665863, -0.24850043654441833, -0.24084112048149109, -0.26987877488136292, 0.039058320224285126, 0.3259071409702301, -0.082709126174449921, -0.32301303744316101, 0.31841710209846497, 0.14939120411872864, 0.31837242841720581, 0.3658672571182251, -0.066950269043445587, 0.32398927211761475, -0.2424185574054718, 0.31524267792701721, -0.2423514723777771, 0.69217830896377563, 0.17809870839118958, -0.32502764463424683, -0.1814429759979248, -0.2686769962310791, 0.18265475332736969, -0.13503699004650116, -0.063262127339839935, -0.25394880771636963, -0.27814614772796631, 0.11345597356557846, 
  0.067604035139083862, -0.086272656917572021, 0.11093603074550629, -0.59503400325775146, -0.054127812385559082, -0.0018778961384668946, 0.027084998786449432, 0.44320103526115417, -0.049175992608070374, 0.39966762065887451, 0.28026533126831055, -0.18014253675937653, -0.35454362630844116, -0.33216840028762817, -0.40194472670555115, -0.3430672287940979, -0.29502585530281067, -0.49134865403175354, 0.37589263916015625, 0.32644602656364441, 0.29053747653961182, 0.072756484150886536, -0.081023953855037689, -0.32235315442085266, -0.22244809567928314, -0.13713827729225159, 0.067618750035762787, 0.28085669875144958, -0.23806165158748627, 0.18201923370361328, 0.46487587690353394, 0.38799974322319031, -0.31907325983047485, 
  -0.42884758114814758, -0.31093016266822815, -0.26241606473922729, 0.094472117722034454, -0.095308125019073486, 0.0080125639215111732, -0.42067050933837891, -0.1805453896522522, -0.3150608241558075, -0.022981572896242142, -0.16880959272384644, -0.56682121753692627, 0.075298666954040527, -0.2359602302312851, 0.079170331358909607, -0.33488366007804871, -0.35060587525367737, -0.18112367391586304, 0.12017572671175003, -0.37921550869941711, 0.1048152968287468, -0.14176587760448456, -0.55407446622848511, 0.011495104990899563, -0.076421260833740234, 0.19820234179496765, -0.022295743227005005, -0.28445544838905334, -0.14353741705417633, -0.30861189961433411, -0.25868010520935059, 0.24083715677261353, -0.32786771655082703, 
  -0.43535336852073669, -0.10006836801767349, -0.15321198105812073, 0.23107242584228516, 0.14383940398693085, 0.1740039736032486, -0.10949988663196564, 0.061351053416728973, 0.18253354728221893, 0.3145517110824585, 0.038013387471437454, -0.40371668338775635, 0.021257612854242325, 0.19002975523471832, 0.11103683710098267, -0.067165084183216095, -0.01405657920986414, -0.075605563819408417, 0.27019417285919189, 0.25708484649658203, -0.245151087641716, -0.10881680250167847, 0.21738001704216003, 0.069644145667552948, 0.024379903450608253, 0.26751863956451416, 0.046938657760620117, -0.084512121975421906, 0.29045525193214417, 0.1064113974571228, 0.093974769115447998, 0.29597386717796326, 0.082947537302970886, 
  -0.016108782961964607, 0.20835195481777191, -0.20780777931213379, 0.088130839169025421, -0.050595447421073914, 0.19892016053199768, -0.44490894675254822, -0.22291870415210724, -0.071833036839962006, 0.025585627183318138, 0.035851120948791504, -0.052155956625938416, 0.18157476186752319, -0.17379851639270782, -0.52365565299987793, -0.13387429714202881, -0.41791453957557678, -0.35199630260467529, -0.13074551522731781, 0.015186622738838196, -0.12046046555042267, -0.27918526530265808, -0.18892697989940643, -0.18601803481578827, 0.25410002470016479, -0.28222969174385071, 0.17962859570980072, -0.081890970468521118, 0.15183377265930176, -0.19539807736873627, -0.091773152351379395, -0.26967126131057739, -0.3064647912979126, 
  0.37620630860328674, -0.13458868861198425, -0.12672419846057892, -0.36557692289352417, -0.19384825229644775, -0.10471104830503464, 0.10761987417936325, 0.39720219373703003, 0.1132659912109375, -0.33989089727401733, -0.20520976185798645, 0.0030262197833508253, 0.17315807938575745, -0.073049530386924744, 0.04880770668387413, -0.26523187756538391, -0.21475066244602203, 0.030524333938956261, 0.61242794990539551, 0.18746204674243927, -0.049454465508460999, -0.312559574842453, 0.36728248000144958, 0.081672310829162598, -0.41252464056015015, -0.092152796685695648, -0.21192242205142975, -0.23934479057788849, 0.065171301364898682, 0.12166325002908707, -0.05690968781709671, 0.037401530891656876, -0.11637608706951141, 
  -0.19905850291252136, 0.35397353768348694, -0.11601399630308151, -0.091953463852405548, -0.077001646161079407, 0.14721469581127167, 0.1345011442899704, 0.00055423250887542963, -0.072653256356716156, 0.27858579158782959, -0.22669056057929993, -0.24536119401454926, -0.39150458574295044, -0.33545118570327759, 0.34749314188957214, 0.13166053593158722, -0.01935962587594986, 0.13612078130245209, 0.17567157745361328, -0.052597105503082275, 0.13055925071239471, 0.037839159369468689, 0.35689550638198853, -0.62358886003494263, 0.28536543250083923, 0.023208186030387878, -0.16986256837844849, 0.059702839702367783, 0.10210104286670685, -0.045346897095441818, 0.16989773511886597, -0.091662198305130005, -0.17114438116550446, 
  -0.015231931582093239, 0.32267865538597107, -0.19312508404254913, -0.0078783612698316574, -0.20567159354686737, 0.37684711813926697, 0.12235354632139206, -0.23561172187328339, 0.33951011300086975, -0.1867319792509079, 0.28187188506126404, -0.11025479435920715, -0.24250608682632446, -0.10949221253395081, -0.11569605767726898, 0.035403966903686523, 0.062952421605587006, -0.19414016604423523, 0.092240035533905029, -0.024354828521609306, -0.03310832753777504, -0.19414792954921722, -0.19805563986301422, -0.067588329315185547, 0.0075546940788626671, -0.21476201713085175, 0.30631440877914429, 0.17444780468940735, 0.19554665684700012, 0.30774053931236267, -0.22340509295463562, 0.35196670889854431, -0.22533220052719116, 
  0.36323434114456177, 0.22648368775844574, 0.076870784163475037, -0.30638590455055237, 0.27793881297111511, 0.18409118056297302, -0.016693791374564171, 0.012924223206937313, 0.23245425522327423, -0.23129795491695404, -0.30139860510826111, 0.57567787170410156, 0.11424529552459717, -0.12206578254699707, -0.26287302374839783, -0.16046755015850067, 0.1656498908996582, 0.012976772151887417, 0.34508782625198364, 0.041136909276247025, 0.044182468205690384, -0.035209730267524719, 0.14869306981563568, 0.024091726168990135, -0.25518399477005005, 0.3160645067691803, -0.27983149886131287, 0.12322262674570084, 0.30177834630012512, 0.035217497497797012, -0.11076798290014267, 0.072623260319232941, -0.18742938339710236, 
  -0.28663566708564758, 0.11062845587730408, 0.20693919062614441, 0.098342530429363251, -0.37174907326698303, -0.081257499754428864, -0.12237145751714706, -0.22688129544258118, 0.070557460188865662, -0.13970042765140533, -0.057086668908596039, -0.38556832075119019, -0.19777080416679382, 0.097398430109024048, -0.054506473243236542, -0.2096075564622879, 0.01099449023604393, 0.2082621306180954, 0.16314288973808289, -0.35117071866989136, 0.11083176732063293, -0.27969923615455627, -0.29145553708076477, 0.20518079400062561, 0.11007262021303177, -0.30264529585838318, -0.16949582099914551, -0.28452408313751221, 0.19571305811405182, 0.0967913419008255, -0.31409204006195068, 0.058892499655485153, -0.054754734039306641, 
  0.098005339503288269, -0.37896224856376648, -0.41698664426803589, -0.2020738422870636, 0.37007233500480652, -0.059239860624074936, 0.17621830105781555, 0.063786134123802185, 0.11371858417987823, 0.29308122396469116, 0.082870498299598694, 0.65934371948242188, 0.089513808488845825, 0.3302556574344635, 0.026358034461736679, -0.1746794581413269, -0.14390550553798676, 0.26413637399673462, -0.024292116984724998, 0.036916397511959076, -0.11464836448431015, 0.092843383550643921, 0.56830704212188721, -0.29721945524215698, -0.044221106916666031, 0.18227352201938629, -0.17369617521762848, 0.24970661103725433, 0.17683383822441101, -0.20888939499855042, 0.37087911367416382, -0.0028950197156518698, -0.25558462738990784, 
  0.47378289699554443, 0.15362778306007385, -0.20226107537746429, -0.26051145792007446, -0.020727513357996941, 0.1680440753698349, 0.14958921074867249, 0.44907352328300476, 0.37599879503250122, 0.36056262254714966, -0.097202710807323456, 0.38629117608070374, -0.18381769955158234, -0.40320968627929688, -0.27804574370384216, -0.023395026102662086, 0.065888211131095886, 0.171696737408638, 0.43825486302375793, 0.1409928947687149, 0.22496190667152405, -0.081387318670749664, 0.24252250790596008, 0.075755208730697632, 0.13813817501068115, -0.36921039223670959, -0.24451637268066406, 0.25312656164169312, -0.26431584358215332, 0.20576024055480957, -0.44293785095214844, -0.09445461630821228, -0.33925312757492065, 
  0.10825960338115692, 0.37296748161315918, 0.047080401331186295, -0.3452174961566925, 0.079708874225616455, -0.22818447649478912, -0.083708152174949646, -0.25463715195655823, -0.17854125797748566, 0.21812982857227325, -0.12661519646644592, -0.180710569024086, -0.048750691115856171, 0.24167965352535248, 0.081520423293113708, -0.46275222301483154, -0.046913236379623413, -0.18010607361793518, -0.49186849594116211, -0.14422757923603058, -0.46773418784141541, -0.21602211892604828, 0.28714317083358765, -0.41344624757766724, -0.23171563446521759, -0.19185729324817657, -0.38038212060928345, -0.11024356633424759, 0.081954307854175568, -0.33113667368888855, 0.087472923099994659, -0.23304404318332672, -0.26579901576042175, 
  -0.058362040668725967, -0.05110149085521698, -0.13174417614936829, -0.030485734343528748, -0.22522558271884918, -0.2478223592042923, 0.041436474770307541, -0.10513050109148026, 0.060278426855802536, 0.19583632051944733, 0.29203960299491882, 0.1847815215587616, 0.10255566984415054, -0.23212826251983643, -0.24653239548206329, -0.15633168816566467, -0.33170917630195618, -0.2964518666267395, 0.051622133702039719, 0.14985568821430206, -0.3579527735710144, -0.1931946724653244, 0.099683940410614014, -0.13777315616607666, -0.56839483976364136, 0.14610296487808228, 0.061600595712661743, -0.11118565499782562, 0.060783784836530685, -0.29307553172111511, -0.54905444383621216, 0.20892688632011414, 0.0060027097351849079, 
  -0.45371600985527039, -0.21354340016841888, 0.38846659660339355, -0.21126608550548553, 0.06457829475402832, -0.18086814880371094, 0.056328549981117249, 0.1085372120141983, -0.079852215945720673, -0.17663159966468811, -0.33319947123527527, -0.38934299349784851, -0.25270313024520874, -0.085202902555465698, -0.084245547652244568, -0.12363650649785995, -0.31041902303695679, -0.2622603178024292, -0.28257915377616882, -0.26158764958381653, -0.045058216899633408, 0.044931381940841675, -0.38713192939758301, -0.052509598433971405, 0.29701235890388489, -0.054958589375019073, -0.29840981960296631, -0.16353277862071991, -0.23582984507083893, -0.09360639750957489, -0.0060084066353738308, -0.028145661577582359, 0.18432505428791046, 
  -0.041988532990217209, 0.41530591249465942, -0.34599614143371582, 0.062471833080053329, -0.08525848388671875, 0.30269604921340942, -0.14152942597866058, -0.07615382969379425, 0.028161276131868362, 0.28695109486579895, -0.17156460881233215, 0.27554613351821899, -0.27263751626014709, -0.17480736970901489, 0.31978827714920044, -0.29360166192054749, 0.028647676110267639, 0.25401151180267334, 0.33955267071723938, 0.25731128454208374, 0.14940826594829559, -0.088838547468185425, 0.34012949466705322, -0.32061326503753662, -0.12353043258190155, -0.10799024999141693, 0.17137518525123596, 0.12435439974069595, 0.034958302974700928, 0.0676456019282341, -0.37272745370864868, -0.35415306687355042, -0.33003655076026917, 
  -0.32704892754554749, 0.21492797136306763, 0.11737658828496933, 0.11713656783103943, 0.047805353999137878, 0.058266974985599518, 0.023522919043898582, -0.098031632602214813, 0.020313089713454247, 0.16337306797504425, 0.073631621897220612, -0.34567195177078247, -0.12563258409500122, -0.23591578006744385, -0.15472623705863953, 0.2182021290063858, 0.29301559925079346, 0.22265145182609558, -0.21785053610801697, 0.021241184324026108, -0.096322052180767059, -0.23929218947887421, -0.23382493853569031, 0.22768273949623108, 0.24947695434093475, 0.1872168630361557, -0.011581123806536198, 0.0985446497797966, 0.39035472273826599, 0.36976045370101929, 0.085097230970859528, 3.9733818994136527e-05, 0.031025882810354233, 
  -0.14798276126384735, -0.0032962074037641287, -0.35124403238296509, -0.5628814697265625, 0.15499857068061829, -0.31511282920837402, -0.05878087505698204, 0.41412672400474548, -0.017778607085347176, 0.10706459730863571, 0.14473104476928711, 0.12357307225465775, 0.12107604742050171, -0.010060505941510201, -0.14982686936855316, -0.21801914274692535, -0.07482437789440155, -0.17774231731891632, -0.032345790416002274, 0.37808811664581299, -0.12027310580015182, 0.080705180764198303, 0.23367662727832794, -0.20064049959182739, 0.51794689893722534, -0.13304969668388367, -0.41087064146995544, 0.2282053679227829, 0.092615269124507904, 0.25845539569854736, 0.08820420503616333, -0.16141608357429504, -0.014179427176713943, 
  -0.21419218182563782, -0.082987815141677856, 0.25267872214317322, 0.32912120223045349, 0.23819281160831451, 0.15954947471618652, 0.031392280012369156, -0.19962036609649658, -0.067942015826702118, -0.072348780930042267, -0.25541755557060242, -0.068437777459621429, 0.48619365692138672, 0.056725628674030304, -0.099792569875717163, 0.28927594423294067, -0.092539370059967041, -0.022899389266967773, -0.23479215800762177, -0.012070033699274063, 0.25911533832550049, -0.28255376219749451, 0.088778197765350342, 0.15353445708751678, -0.26757454872131348, -0.26026225090026855, 0.29898470640182495, -0.041513923555612564, 0.11077897250652313, 0.01314572524279356, 0.23034122586250305, 0.17884182929992676, 0.31697171926498413, 
  -0.11570917069911957, 0.057577729225158691, 0.069486089050769806, 0.40756776928901672, 0.21222192049026489, 0.16295978426933289, 0.18119741976261139, -0.2853257954120636, 0.30959603190422058, 0.38049042224884033, -0.024583699181675911, 0.2352554053068161, 0.012691834941506386, -0.2429606020450592, 0.47193402051925659, 0.28702506422996521, 0.21645420789718628, -0.13548514246940613, 0.089650444686412811, -0.029661703854799271, -0.02071729488670826, 0.26538607478141785, 0.23401875793933868, -0.03555302694439888, -0.028333134949207306, 0.35967358946800232, 0.087509006261825562, 0.40454015135765076, -0.12555749714374542, -0.18036709725856781, -0.26242023706436157, -0.1763775497674942, 0.339599609375, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  -0.46868243813514709, -0.4239223301410675, 0.33572688698768616, -0.01072350051254034, 0.50855058431625366, -0.24306060373783112, -0.26986271142959595, 0.017410295084118843, -0.68975293636322021, -0.12982414662837982, -0.53772473335266113, -0.41159218549728394, 0.47294330596923828, 0.3955351710319519, 0.17328785359859467, -0.39614257216453552, -0.37547299265861511, 0.082596629858016968, -0.87066525220870972, -0.016703959554433823, 
  0.57350808382034302, 0.6425013542175293, -0.5042920708656311, 0.1667969822883606, 0.15238501131534576, 0.25268352031707764, 0.74563270807266235, 0.12347298115491867, 0.081486031413078308, -0.48856207728385925, 0.14903092384338379, -0.088500052690505981, 0.008249170146882534, -0.039828002452850342, -0.40925130248069763, -0.17610064148902893, -0.17653581500053406, 0.68262320756912231, 0.59918683767318726, -0.82794398069381714, 
  -0.24540702998638153, 0.043029036372900009, 0.23747722804546356, -0.33275306224822998, 0.46851953864097595, -0.014500943943858147, 0.22745920717716217, -0.09811912477016449, 0.38506674766540527, 0.46452078223228455, -0.24368812143802643, -0.36309346556663513, 0.27175113558769226, -0.36268973350524902, 0.27671265602111816, -0.26715964078903198, -0.038831047713756561, 0.4130176305770874, -0.3707977831363678, -0.23680317401885986, 
  -0.3165757954120636, 0.20366506278514862, -0.33614334464073181, -0.25681546330451965, 0.043633650988340378, 0.53185880184173584, 0.27803558111190796, 0.2686648964881897, 0.44645598530769348, -0.41738757491111755, 0.42066565155982971, 0.37802770733833313, -0.0014621986774727702, -0.19396096467971802, -0.17527459561824799, 0.70531904697418213, 0.033981230109930038, 0.30540969967842102, 0.077589757740497589, -0.17176750302314758, 
  0.83461636304855347, 0.47560605406761169, -0.32570263743400574, -0.32580304145812988, -0.41233426332473755, 0.58019959926605225, -0.1924622505903244, 0.43725284934043884, -0.11749801784753799, 0.56235897541046143, 0.00027570518432185054, -0.1898299902677536, -0.12341852486133575, 0.38168436288833618, -0.068268731236457825, 0.14088723063468933, 0.079031646251678467, -0.31907510757446289, 0.87874948978424072, -0.10406940430402756, 
  0.85769522190093994, 0.84417390823364258, -0.34258517622947693, 0.12338148057460785, -0.1697990894317627, 0.2168375700712204, 0.44373911619186401, 0.21903158724308014, 0.60038298368453979, -0.34164884686470032, -0.45170491933822632, 0.68154644966125488, -0.076555430889129639, 0.29852116107940674, -0.17156583070755005, 0.51177024841308594, -0.28248056769371033, 0.26538577675819397, 0.24444468319416046, 0.15886937081813812, 
  0.27370280027389526, -0.28141087293624878, -0.026344200596213341, 0.27094131708145142, 0.068188890814781189, -0.1775069534778595, -0.022637482732534409, 0.13806957006454468, 0.11981125175952911, 0.22817951440811157, -0.26344358921051025, 0.1701362282037735, -0.49380111694335938, -0.05457942932844162, -0.089356347918510437, -0.14068278670310974, 0.10462202876806259, -0.22316254675388336, 0.096184037625789642, -0.16342870891094208, 
  -0.46161267161369324, 0.053037825971841812, -0.40048947930335999, -0.47078531980514526, -0.38024187088012695, -0.19535592198371887, -0.34562939405441284, -0.52217209339141846, 0.45334041118621826, 0.10067581385374069, 0.43689149618148804, 0.36608210206031799, -0.43830516934394836, -0.19677576422691345, -0.36727744340896606, -0.029902730137109756, -0.33137068152427673, -0.20089790225028992, 0.1598396897315979, 0.36022970080375671, 
  -0.0548858642578125, 0.53844964504241943, 0.11382967978715897, 0.2135598212480545, 0.64711028337478638, 0.077459946274757385, 0.53156858682632446, -0.22622638940811157, -0.25054454803466797, -0.2804144024848938, -0.058254484087228775, 0.20497271418571472, 0.62938880920410156, 0.39128518104553223, 0.04987567663192749, 0.017971055582165718, -0.27000334858894348, 0.51117753982543945, 0.04964543879032135, -0.121512271463871, 
  -0.31902655959129333, -0.18414503335952759, -0.038128983229398727, 0.26298210024833679, -0.58312088251113892, 0.14541292190551758, 0.07254762202501297, -0.2934945821762085, 0.43751579523086548, -0.27901959419250488, 0.11703932285308838, 0.14173875749111176, -0.62173354625701904, -0.29085808992385864, -0.49684005975723267, 0.24398335814476013, 0.33586108684539795, 0.1424858570098877, 0.29700931906700134, 0.47592997550964355, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[3*10] = { 
  -0.4659932553768158, -1.9670522212982178, -0.82202070951461792, 0.62937122583389282, -0.0056418362073600292, 0.058601733297109604, 0.16607211530208588, 0.43373513221740723, -0.60358220338821411, 0.17241652309894562, 
  0.7083810567855835, -0.46309930086135864, 0.69567829370498657, -0.74114477634429932, -0.23313216865062714, -0.29182061553001404, 0.052652537822723389, 0.12960696220397949, 0.32609879970550537, -0.05361223965883255, 
  -0.96038001775741577, 0.44893139600753784, 0.011718027293682098, 0.4763602614402771, 0.93031406402587891, 0.37387159466743469, -0.17563363909721375, -0.20555028319358826, 0.38398182392120361, -0.48207658529281616, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,3 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 80, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
